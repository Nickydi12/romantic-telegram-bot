import datetime
import logging
import asyncio
import pytz
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from apscheduler.schedulers.background import BackgroundScheduler
from aiohttp import web

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8069252349:AAEGXgG0KH9Ybzq6A34DX91MaHNIcMm7_y0"
MY_ID = 661326630         # ‚Üê –¢–≤–æ–π Telegram ID
HER_ID = 1175351775       # ‚Üê ID –¥–µ–≤—É—à–∫–∏
PHRASES_FILE = "phrases.txt"
PHOTOS_FOLDER = "photos"

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

# === –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ===
async def send_message(chat_id):
    day_number = datetime.datetime.now().timetuple().tm_yday
    logging.info(f"–î–µ–Ω—å #{day_number} - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ chat_id: {chat_id}")

    try:
        with open(PHRASES_FILE, "r", encoding="utf-8") as f:
            phrases = f.readlines()

        if day_number > len(phrases):
            await bot.send_message(chat_id, "–§—Ä–∞–∑—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò¢")
            return

        phrase = phrases[day_number - 1].strip()
        photo_path = f"{PHOTOS_FOLDER}/{day_number}.jpg"

        photo = FSInputFile(photo_path)
        await bot.send_photo(chat_id=chat_id, photo=photo, caption=phrase)

        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ chat_id {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ===
scheduler = BackgroundScheduler(timezone=pytz.timezone("Europe/Moscow"))

# –¢–µ–±–µ –≤ 8:45
scheduler.add_job(lambda: asyncio.run(send_message(MY_ID)), "cron", hour=8, minute=45)

# –î–µ–≤—É—à–∫–µ –≤ 9:00
scheduler.add_job(lambda: asyncio.run(send_message(HER_ID)), "cron", hour=9, minute=0)

# === aiohttp —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def handle(request):
    return web.Response(text="Bot is running")

async def run_web():
    app = web.Application()
    app.add_routes([web.get('/', handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port=8080)
    await site.start()

# === –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ===
async def main():
    await run_web()
    scheduler.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç—É—Ç
    await send_message(MY_ID)  # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    try:
        while True:
            await asyncio.sleep(3600)
    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
